name = "etc files manipulation pattern"
# patterns for detecting manipulation with /etc/passwd, /etc/shadow and /etc/hosts files
behavior_patterns = {
    "32bit": {
        "syscall": [
            bytes([0xcd, 0x80])  # int 0x80 (32-bit syscall)
        ],
        "open_passwd": [
            bytes([0xb0, 0x05]),  # mov al, 5 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x05]),  # xor eax, eax; mov al, 5
            bytes([0x6a, 0x05, 0x58]),  # push 5; pop eax
            bytes([0xb8, 0x05, 0x00, 0x00, 0x00]),  # mov eax, 5
        ],
        "open_shadow": [
            bytes([0xb0, 0x05]),  # mov al, 5 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x05]),  # xor eax, eax; mov al, 5
            bytes([0x6a, 0x05, 0x58]),  # push 5; pop eax
            bytes([0xb8, 0x05, 0x00, 0x00, 0x00]),  # mov eax, 5
        ],
        "open_hosts": [
            bytes([0xb0, 0x05]),  # mov al, 5 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x05]),  # xor eax, eax; mov al, 5
            bytes([0x6a, 0x05, 0x58]),  # push 5; pop eax
            bytes([0xb8, 0x05, 0x00, 0x00, 0x00]),  # mov eax, 5
        ],
        "read_file": [
            bytes([0xb0, 0x03]),  # mov al, 3 (read syscall)
            bytes([0x31, 0xc0, 0xb0, 0x03]),  # xor eax, eax; mov al, 3
            bytes([0x6a, 0x03, 0x58]),  # push 3; pop eax
            bytes([0xb8, 0x03, 0x00, 0x00, 0x00]),  # mov eax, 3
        ],
        "write_file": [
            bytes([0xb0, 0x04]),  # mov al, 4 (write syscall)
            bytes([0x31, 0xc0, 0xb0, 0x04]),  # xor eax, eax; mov al, 4
            bytes([0x6a, 0x04, 0x58]),  # push 4; pop eax
            bytes([0xb8, 0x04, 0x00, 0x00, 0x00]),  # mov eax, 4
        ],
        "close_file": [
            bytes([0xb0, 0x06]),  # mov al, 6 (close syscall)
            bytes([0x31, 0xc0, 0xb0, 0x06]),  # xor eax, eax; mov al, 6
            bytes([0x6a, 0x06, 0x58]),  # push 6; pop eax
            bytes([0xb8, 0x06, 0x00, 0x00, 0x00]),  # mov eax, 6
        ],
        "chmod_file": [
            bytes([0xb0, 0x0f]),  # mov al, 15 (chmod syscall)
            bytes([0x31, 0xc0, 0xb0, 0x0f]),  # xor eax, eax; mov al, 15
            bytes([0x6a, 0x0f, 0x58]),  # push 15; pop eax
            bytes([0xb8, 0x0f, 0x00, 0x00, 0x00]),  # mov eax, 15
        ],
        "execve": [
            bytes([0xb0, 0x0b]),  # mov al, 11 (execve syscall)
            bytes([0x31, 0xc0, 0xb0, 0x0b]),  # xor eax, eax; mov al, 11
            bytes([0x6a, 0x0b, 0x58]),  # push 11; pop eax
            bytes([0xb8, 0x0b, 0x00, 0x00, 0x00]),  # mov eax, 11
        ],
        "passwd_string": [
            # Complete string: /etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # /etc/passwd
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # //etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # /etc//passwd

            # Stack push patterns for /etc/passwd
            bytes([0x68, 0x73, 0x73, 0x77, 0x64]),  # push "sswd"
            bytes([0x68, 0x63, 0x2f, 0x70, 0x61]),  # push "c/pa"
            bytes([0x68, 0x74, 0x65, 0x2f, 0x2f]),  # push "te//"
            bytes([0x68, 0x2f, 0x65, 0x74, 0x63]),  # push "/etc"

            # Push pattern variants
            bytes([0x68, 0x61, 0x73, 0x73, 0x77]),  # push "assw"
            bytes([0x68, 0x70, 0x61, 0x73, 0x73]),  # push "pass"
            bytes([0x68, 0x2f, 0x2f, 0x65, 0x74]),  # push "//et"
        ],
        "shadow_string": [
            # Complete string: /etc/shadow
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77]),  # /etc/shadow
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77]),  # //etc/shadow
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77]),  # /etc//shadow

            # Stack push patterns for /etc/shadow
            bytes([0x68, 0x61, 0x64, 0x6f, 0x77]),  # push "adow"
            bytes([0x68, 0x63, 0x2f, 0x73, 0x68]),  # push "c/sh"
            bytes([0x68, 0x2f, 0x65, 0x74, 0x63]),  # push "/etc"

            # Push pattern variants
            bytes([0x68, 0x68, 0x61, 0x64, 0x6f]),  # push "hado"
            bytes([0x68, 0x73, 0x68, 0x61, 0x64]),  # push "shad"
        ],
        "hosts_string": [
            # Complete string: /etc/hosts
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73]),  # /etc/hosts
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73]),  # //etc/hosts
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73]),  # /etc//hosts

            # Stack push patterns for /etc/hosts
            bytes([0x68, 0x6f, 0x73, 0x74, 0x73]),  # push "osts"
            bytes([0x68, 0x63, 0x2f, 0x68, 0x6f]),  # push "c/ho"
            bytes([0x68, 0x2f, 0x65, 0x74, 0x63]),  # push "/etc"

            # Push pattern variants
            bytes([0x68, 0x68, 0x6f, 0x73, 0x74]),  # push "host"
            bytes([0x68, 0x2f, 0x68, 0x6f, 0x73]),  # push "/hos"
        ],
        "file_flags": [
            bytes([0x31, 0xc9]),  # xor ecx, ecx (O_RDONLY)
            bytes([0x66, 0xb9, 0x01, 0x04]),  # mov cx, 0x401 (O_RDWR|O_CREAT)
            bytes([0x66, 0xb9, 0x42, 0x04]),  # mov cx, 0x442 (O_RDWR|O_CREAT|O_EXCL)
            bytes([0xb1, 0x02]),  # mov cl, 2 (O_RDWR)
        ],
        "file_modes": [
            bytes([0x66, 0xba, 0xa4, 0x01]),  # mov dx, 0x1a4 (0644 octal)
            bytes([0x66, 0xba, 0xff, 0x01]),  # mov dx, 0x1ff (0777 octal)
            bytes([0x66, 0xba, 0xb6, 0x01]),  # mov dx, 0x1b6 (0666 octal)
        ],
        "user_entry": [
            # backdoor user entries added to passwd
            bytes([0x3a, 0x3a, 0x30, 0x3a, 0x30]),  # ::0:0 (root-level user)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68]),  # /bin/sh (shell path)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68]),  # /bin/bash
        ],
        "shadow_entry": [
            # shadow file manipulation patterns
            bytes([0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a]),  # ::::::: (blank password hash)
            bytes([0x72, 0x6f, 0x6f, 0x74, 0x3a]),  # root: (root user entry)
            bytes([0x3a, 0x24, 0x36, 0x24]),  # :$6$ (SHA-512 hash prefix)
            bytes([0x3a, 0x24, 0x31, 0x24]),  # :$1$ (MD5 hash prefix)
            bytes([0x3a, 0x3a, 0x30, 0x3a, 0x30, 0x3a, 0x3a]),  # ::0:0:: (password aging info)
        ],
        "hosts_entry": [
            # hosts file manipulation patterns
            bytes([0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31]),  # 127.0.0.1
            bytes([0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30]),  # 0.0.0.0
            bytes([0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74]),  # localhost

        ],
        "specific": [
            # passwd modification patterns
            bytes([0x31, 0xc9, 0xf7, 0xe1, 0xb0, 0x05, 0x51, 0x68, 0x73, 0x73,
                   0x77, 0x64, 0x68, 0x63, 0x2f, 0x70, 0x61, 0x68, 0x2f, 0x2f,
                   0x65, 0x74]),

            # passwd open pattern
            bytes([0x31, 0xc0, 0x31, 0xdb, 0x31, 0xc9, 0x53, 0x68, 0x73, 0x73, 0x77,
                   0x64, 0x68, 0x63, 0x2f, 0x70, 0x61, 0x68, 0x2f, 0x2f, 0x65, 0x74]),

            bytes([0x6a, 0x05, 0x58, 0x31, 0xc9, 0x51, 0x68, 0x73, 0x73, 0x77, 0x64, 0x68,
                   0x2f, 0x2f, 0x70, 0x61, 0x68, 0x2f, 0x65, 0x74, 0x63]),

            # shadow modification patterns
            bytes([0x31, 0xc9, 0xf7, 0xe1, 0xb0, 0x05, 0x51, 0x68, 0x61, 0x64,
                   0x6f, 0x77, 0x68, 0x63, 0x2f, 0x73, 0x68, 0x68, 0x2f, 0x2f,
                   0x65, 0x74]),

            # shadow open pattern
            bytes([0x31, 0xc0, 0x31, 0xdb, 0x31, 0xc9, 0x53, 0x68, 0x61, 0x64, 0x6f,
                   0x77, 0x68, 0x63, 0x2f, 0x73, 0x68, 0x68, 0x2f, 0x2f, 0x65, 0x74]),

            # hosts modification patterns
            bytes([0x31, 0xc9, 0xf7, 0xe1, 0xb0, 0x05, 0x51, 0x68, 0x6f, 0x73,
                   0x74, 0x73, 0x68, 0x63, 0x2f, 0x68, 0x6f, 0x68, 0x2f, 0x2f,
                   0x65, 0x74]),

            # hosts open pattern
            bytes([0x31, 0xc0, 0x31, 0xdb, 0x31, 0xc9, 0x53, 0x68, 0x6f, 0x73, 0x74,
                   0x73, 0x68, 0x63, 0x2f, 0x68, 0x6f, 0x68, 0x2f, 0x2f, 0x65, 0x74])
        ]
    },
    "64bit": {
        "syscall": [
            bytes([0x0f, 0x05])  # syscall instruction
        ],
        "open_passwd": [
            bytes([0xb0, 0x02]),  # mov al, 2 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x02]),  # xor eax, eax; mov al, 2
            bytes([0x6a, 0x02, 0x58]),  # push 2; pop rax
            bytes([0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00]),  # mov rax, 2
        ],
        "open_shadow": [
            bytes([0xb0, 0x02]),  # mov al, 2 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x02]),  # xor eax, eax; mov al, 2
            bytes([0x6a, 0x02, 0x58]),  # push 2; pop rax
            bytes([0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00]),  # mov rax, 2
        ],
        "open_hosts": [
            bytes([0xb0, 0x02]),  # mov al, 2 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x02]),  # xor eax, eax; mov al, 2
            bytes([0x6a, 0x02, 0x58]),  # push 2; pop rax
            bytes([0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00]),  # mov rax, 2
        ],
        "read_file": [
            bytes([0xb0, 0x00]),  # mov al, 0 (read syscall)
            bytes([0x31, 0xc0]),  # xor eax, eax (read is syscall 0)
            bytes([0x48, 0x31, 0xc0]),  # xor rax, rax
        ],
        "write_file": [
            bytes([0xb0, 0x01]),  # mov al, 1 (write syscall)
            bytes([0x31, 0xc0, 0xb0, 0x01]),  # xor eax, eax; mov al, 1
            bytes([0x6a, 0x01, 0x58]),  # push 1; pop rax
            bytes([0x48, 0xc7, 0xc0, 0x01, 0x00, 0x00, 0x00]),  # mov rax, 1
        ],
        "close_file": [
            bytes([0xb0, 0x03]),  # mov al, 3 (close syscall in x64)
            bytes([0x31, 0xc0, 0xb0, 0x03]),  # xor eax, eax; mov al, 3
            bytes([0x6a, 0x03, 0x58]),  # push 3; pop rax
        ],
        "chmod_file": [
            bytes([0xb0, 0x5a]),  # mov al, 90 (chmod syscall)
            bytes([0x6a, 0x5a, 0x58]),  # push 90; pop rax
        ],
        "execve": [
            bytes([0xb0, 0x3b]),  # mov al, 59 (execve syscall)
            bytes([0x6a, 0x3b, 0x58]),  # push 59; pop rax
            bytes([0x6a, 0x3b, 0x5f]),  # push 59; pop rdi
            bytes([0x48, 0xc7, 0xc0, 0x3b, 0x00, 0x00, 0x00]),  # mov rax, 59
        ],
        "passwd_string": [
            # Complete string: /etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # /etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x41]),
            # /etc/passwdA (with nullbyte fix)
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # //etc/passwd

            # load patterns
            bytes([0x48, 0xb8, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73]),  # mov rax, "/etc/pas"
            bytes([0x48, 0xbf, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73]),  # mov rdi, "/etc/pas"
            bytes([0x48, 0xbb, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73]),  # mov rbx, "/etc/pas"
        ],
        "shadow_string": [
            # Complete string: /etc/shadow
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77]),  # /etc/shadow
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41]),
            # /etc/shadow (with nullbyte fix)
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77]),  # //etc/shadow

            # load patterns
            bytes([0x48, 0xb8, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61]),  # mov rax, "/etc/sha"
            bytes([0x48, 0xbf, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61]),  # mov rdi, "/etc/sha"
            bytes([0x48, 0xbb, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61]),  # mov rbx, "/etc/sha"
        ],
        "hosts_string": [
            # Complete string: /etc/hosts
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73]),  # /etc/hosts
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x41]),
            # /etc/hostsA (with nullbyte fix)
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73]),  # //etc/hosts

            # load patterns
            bytes([0x48, 0xb8, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73]),  # mov rax, "/etc/hos"
            bytes([0x48, 0xbf, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73]),  # mov rdi, "/etc/hos"
            bytes([0x48, 0xbb, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73]),  # mov rbx, "/etc/hos"
        ],
        "file_flags": [
            bytes([0x31, 0xf6]),  # xor esi, esi (O_RDONLY)
            bytes([0xbe, 0x01, 0x04, 0x00, 0x00]),  # mov esi, 0x401 (O_RDWR|O_CREAT)
            bytes([0xbe, 0x42, 0x04, 0x00, 0x00]),  # mov esi, 0x442 (O_RDWR|O_CREAT|O_EXCL)
            bytes([0xbe, 0x02, 0x00, 0x00, 0x00]),  # mov esi, 2 (O_RDWR)
        ],
        "file_modes": [
            bytes([0xba, 0xa4, 0x01, 0x00, 0x00]),  # mov edx, 0x1a4 (0644 octal)
            bytes([0xba, 0xff, 0x01, 0x00, 0x00]),  # mov edx, 0x1ff (0777 octal)
            bytes([0xba, 0xb6, 0x01, 0x00, 0x00]),  # mov edx, 0x1b6 (0666 octal)
        ],
        "user_entry": [
            # backdoor user entries added to passwd
            bytes([0x3a, 0x3a, 0x30, 0x3a, 0x30]),  # ::0:0 (root-level user)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68]),  # /bin/sh (shell path)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68]),  # /bin/bash
        ],
        "shadow_entry": [
            # shadow file manipulation patterns
            bytes([0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a]),  # ::::::: (blank password hash)
            bytes([0x72, 0x6f, 0x6f, 0x74, 0x3a]),  # root: (root user entry)
            bytes([0x3a, 0x24, 0x36, 0x24]),  # :$6$ (SHA-512 hash prefix)
            bytes([0x3a, 0x24, 0x31, 0x24]),  # :$1$ (MD5 hash prefix)
            bytes([0x3a, 0x3a, 0x30, 0x3a, 0x30, 0x3a, 0x3a]),  # ::0:0:: (password aging info)
        ],
        "hosts_entry": [
            #  hosts file manipulation patterns
            bytes([0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31]),  # 127.0.0.1
            bytes([0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30]),  # 0.0.0.0
            bytes([0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74]),  # localhost

        ],
        "specific": [
            #passwd modification patterns
            bytes([0x48, 0x31, 0xf6, 0x48, 0xbb, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73,
                   0x53, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xd2, 0xb0, 0x02, 0x0f, 0x05]),  # passwd open

            bytes([0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x3d, 0x00, 0x00, 0x00, 0x00,
                   0x48, 0x31, 0xf6, 0x0f, 0x05]),  # open with RIP-relative addressing

            # shadow modification patterns
            bytes([0x48, 0x31, 0xf6, 0x48, 0xbb, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x73, 0x68, 0x61,
                   0x53, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xd2, 0xb0, 0x02, 0x0f, 0x05]),  # shadow open

            bytes([0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x3d, 0x00, 0x00, 0x00, 0x00,
                   0x48, 0x31, 0xf6, 0x0f, 0x05]),  # open with RIP-relative addressing

            # hosts modification patterns
            bytes([0x48, 0x31, 0xf6, 0x48, 0xbb, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x68, 0x6f, 0x73,
                   0x53, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xd2, 0xb0, 0x02, 0x0f, 0x05]),  # hosts open

            bytes([0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x3d, 0x00, 0x00, 0x00, 0x00,
                   0x48, 0x31, 0xf6, 0x0f, 0x05]),  # open with RIP-relative addressing
        ]
    }
}

# Define pattern combinations that indicate system file modification when found together
pattern_combinations = {
    "32bit": [
        # /etc/passwd patterns
        ["syscall", "open_passwd", "passwd_string"],  # Opening /etc/passwd
        ["open_passwd", "passwd_string", "write_file"],  # Opening and writing to /etc/passwd
        ["passwd_string", "user_entry"],  # Having both passwd path and suspicious user entry
        ["open_passwd", "read_file", "write_file", "passwd_string"],  # Read-modify-write pattern on passwd

        # /etc/shadow patterns
        ["syscall", "open_shadow", "shadow_string"],  # Opening /etc/shadow
        ["open_shadow", "shadow_string", "write_file"],  # Opening and writing to /etc/shadow
        ["shadow_string", "shadow_entry"],  # Having both shadow path and suspicious entry
        ["open_shadow", "read_file", "write_file", "shadow_string"],  # Read-modify-write pattern on shadow

        # /etc/hosts patterns
        ["syscall", "open_hosts", "hosts_string"],  # Opening /etc/hosts
        ["open_hosts", "hosts_string", "write_file"],  # Opening and writing to /etc/hosts
        ["hosts_string", "hosts_entry"],  # Having both hosts path and suspicious entry
        ["open_hosts", "read_file", "write_file", "hosts_string"],  # Read-modify-write pattern on hosts

        ["chmod_file", "passwd_string"],  # Changing permissions on passwd file
        ["chmod_file", "shadow_string"],  # Changing permissions on shadow file
        ["chmod_file", "hosts_string"]  # Changing permissions on hosts file
    ],
    "64bit": [
        # /etc/passwd patterns
        ["syscall", "open_passwd", "passwd_string"],  # Opening /etc/passwd
        ["open_passwd", "passwd_string", "write_file"],  # Opening and writing to /etc/passwd
        ["passwd_string", "user_entry"],  # Having both passwd path and suspicious user entry
        ["open_passwd", "read_file", "write_file", "passwd_string"],  # Read-modify-write pattern on passwd

        # /etc/shadow patterns
        ["syscall", "open_shadow", "shadow_string"],  # Opening /etc/shadow
        ["open_shadow", "shadow_string", "write_file"],  # Opening and writing to /etc/shadow
        ["shadow_string", "shadow_entry"],  # Having both shadow path and suspicious entry
        ["open_shadow", "read_file", "write_file", "shadow_string"],  # Read-modify-write pattern on shadow

        # /etc/hosts patterns
        ["syscall", "open_hosts", "hosts_string"],  # Opening /etc/hosts
        ["open_hosts", "hosts_string", "write_file"],  # Opening and writing to /etc/hosts
        ["hosts_string", "hosts_entry"],  # Having both hosts path and suspicious entry
        ["open_hosts", "read_file", "write_file", "hosts_string"],  # Read-modify-write pattern on hosts

        ["chmod_file", "passwd_string"],  # Changing permissions on passwd file
        ["chmod_file", "shadow_string"],  # Changing permissions on shadow file
        ["chmod_file", "hosts_string"],  # Changing permissions on hosts file

        # Execve patterns after file operations
        ["open_passwd", "write_file", "execve"],  # Write to passwd followed by exec
        ["open_shadow", "write_file", "execve"],  # Write to shadow followed by exec
        ["open_hosts", "write_file", "execve"]  # Write to hosts followed by exec
    ]
}