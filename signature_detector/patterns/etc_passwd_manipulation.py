# Behavior patterns organized by architecture and category
behavior_patterns = {
    "32bit": {
        "syscall": [
            bytes([0xcd, 0x80])  # int 0x80 (32-bit syscall)
        ],
        "open_passwd": [
            bytes([0xb0, 0x05]),  # mov al, 5 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x05]),  # xor eax, eax; mov al, 5
            bytes([0x6a, 0x05, 0x58]),  # push 5; pop eax
            bytes([0xb8, 0x05, 0x00, 0x00, 0x00]),  # mov eax, 5
        ],
        "read_file": [
            bytes([0xb0, 0x03]),  # mov al, 3 (read syscall)
            bytes([0x31, 0xc0, 0xb0, 0x03]),  # xor eax, eax; mov al, 3
            bytes([0x6a, 0x03, 0x58]),  # push 3; pop eax
            bytes([0xb8, 0x03, 0x00, 0x00, 0x00]),  # mov eax, 3
        ],
        "write_file": [
            bytes([0xb0, 0x04]),  # mov al, 4 (write syscall)
            bytes([0x31, 0xc0, 0xb0, 0x04]),  # xor eax, eax; mov al, 4
            bytes([0x6a, 0x04, 0x58]),  # push 4; pop eax
            bytes([0xb8, 0x04, 0x00, 0x00, 0x00]),  # mov eax, 4
        ],
        "close_file": [
            bytes([0xb0, 0x06]),  # mov al, 6 (close syscall)
            bytes([0x31, 0xc0, 0xb0, 0x06]),  # xor eax, eax; mov al, 6
            bytes([0x6a, 0x06, 0x58]),  # push 6; pop eax
            bytes([0xb8, 0x06, 0x00, 0x00, 0x00]),  # mov eax, 6
        ],
        "chmod_file": [
            bytes([0xb0, 0x0f]),  # mov al, 15 (chmod syscall)
            bytes([0x31, 0xc0, 0xb0, 0x0f]),  # xor eax, eax; mov al, 15
            bytes([0x6a, 0x0f, 0x58]),  # push 15; pop eax
            bytes([0xb8, 0x0f, 0x00, 0x00, 0x00]),  # mov eax, 15
        ],
        "execve": [
            bytes([0xb0, 0x0b]),  # mov al, 11 (execve syscall)
            bytes([0x31, 0xc0, 0xb0, 0x0b]),  # xor eax, eax; mov al, 11
            bytes([0x6a, 0x0b, 0x58]),  # push 11; pop eax
            bytes([0xb8, 0x0b, 0x00, 0x00, 0x00]),  # mov eax, 11
        ],
        "passwd_string": [
            # Complete string: /etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # /etc/passwd
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # //etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # /etc//passwd

            # Stack push patterns for /etc/passwd (common in 32-bit)
            bytes([0x68, 0x73, 0x73, 0x77, 0x64]),  # push "sswd"
            bytes([0x68, 0x63, 0x2f, 0x70, 0x61]),  # push "c/pa"
            bytes([0x68, 0x74, 0x65, 0x2f, 0x2f]),  # push "te//"
            bytes([0x68, 0x2f, 0x65, 0x74, 0x63]),  # push "/etc"

            # Push pattern variants
            bytes([0x68, 0x61, 0x73, 0x73, 0x77]),  # push "assw"
            bytes([0x68, 0x70, 0x61, 0x73, 0x73]),  # push "pass"
            bytes([0x68, 0x2f, 0x2f, 0x65, 0x74]),  # push "//et"
        ],
        "file_flags": [
            bytes([0x31, 0xc9]),  # xor ecx, ecx (O_RDONLY)
            bytes([0x66, 0xb9, 0x01, 0x04]),  # mov cx, 0x401 (O_RDWR|O_CREAT)
            bytes([0x66, 0xb9, 0x42, 0x04]),  # mov cx, 0x442 (O_RDWR|O_CREAT|O_EXCL)
            bytes([0xb1, 0x02]),  # mov cl, 2 (O_RDWR)
        ],
        "file_modes": [
            bytes([0x66, 0xba, 0xa4, 0x01]),  # mov dx, 0x1a4 (0644 octal)
            bytes([0x66, 0xba, 0xff, 0x01]),  # mov dx, 0x1ff (0777 octal)
            bytes([0x66, 0xba, 0xb6, 0x01]),  # mov dx, 0x1b6 (0666 octal)
        ],
        "user_entry": [
            # Common backdoor user entries added to passwd
            bytes([0x3a, 0x3a, 0x30, 0x3a, 0x30]),  # ::0:0 (root-level user)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68]),  # /bin/sh (shell path)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68]),  # /bin/bash
        ],
        "specific": [
            # common passwd modification patterns
            bytes([0x31, 0xc9, 0xf7, 0xe1, 0xb0, 0x05, 0x51, 0x68, 0x73, 0x73,
                   0x77, 0x64, 0x68, 0x63, 0x2f, 0x70, 0x61, 0x68, 0x2f, 0x2f,
                   0x65, 0x74]),  # 32-bit passwd open pattern

            bytes([0x31, 0xc0, 0x31, 0xdb, 0x31, 0xc9, 0x53, 0x68, 0x73, 0x73, 0x77,
                   0x64, 0x68, 0x63, 0x2f, 0x70, 0x61, 0x68, 0x2f, 0x2f, 0x65, 0x74]),

            bytes([0x6a, 0x05, 0x58, 0x31, 0xc9, 0x51, 0x68, 0x73, 0x73, 0x77, 0x64, 0x68,
                   0x2f, 0x2f, 0x70, 0x61, 0x68, 0x2f, 0x65, 0x74, 0x63])
        ]
    },
    "64bit": {
        "syscall": [
            bytes([0x0f, 0x05])  # syscall instruction (64-bit)
        ],
        "open_passwd": [
            bytes([0xb0, 0x02]),  # mov al, 2 (open syscall)
            bytes([0x31, 0xc0, 0xb0, 0x02]),  # xor eax, eax; mov al, 2
            bytes([0x6a, 0x02, 0x58]),  # push 2; pop rax
            bytes([0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00]),  # mov rax, 2
        ],
        "read_file": [
            bytes([0xb0, 0x00]),  # mov al, 0 (read syscall)
            bytes([0x31, 0xc0]),  # xor eax, eax (read is syscall 0)
            bytes([0x48, 0x31, 0xc0]),  # xor rax, rax
        ],
        "write_file": [
            bytes([0xb0, 0x01]),  # mov al, 1 (write syscall)
            bytes([0x31, 0xc0, 0xb0, 0x01]),  # xor eax, eax; mov al, 1
            bytes([0x6a, 0x01, 0x58]),  # push 1; pop rax
            bytes([0x48, 0xc7, 0xc0, 0x01, 0x00, 0x00, 0x00]),  # mov rax, 1
        ],
        "close_file": [
            bytes([0xb0, 0x03]),  # mov al, 3 (close syscall in x64)
            bytes([0x31, 0xc0, 0xb0, 0x03]),  # xor eax, eax; mov al, 3
            bytes([0x6a, 0x03, 0x58]),  # push 3; pop rax
        ],
        "chmod_file": [
            bytes([0xb0, 0x5a]),  # mov al, 90 (chmod syscall)
            bytes([0x6a, 0x5a, 0x58]),  # push 90; pop rax
        ],
        "execve": [
            bytes([0xb0, 0x3b]),  # mov al, 59 (execve syscall)
            bytes([0x6a, 0x3b, 0x58]),  # push 59; pop rax
            bytes([0x6a, 0x3b, 0x5f]),  # push 59; pop rdi
            bytes([0x48, 0xc7, 0xc0, 0x3b, 0x00, 0x00, 0x00]),  # mov rax, 59
        ],
        "passwd_string": [
            # Complete string: /etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # /etc/passwd
            bytes([0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x41]),
            # /etc/passwdA (with nullbyte fix)
            bytes([0x2f, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64]),  # //etc/passwd

            # Common 64-bit load patterns
            bytes([0x48, 0xb8, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73]),  # mov rax, "/etc/pas"
            bytes([0x48, 0xbf, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73]),  # mov rdi, "/etc/pas"
            bytes([0x48, 0xbb, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73]),  # mov rbx, "/etc/pas"
        ],
        "file_flags": [
            bytes([0x48, 0x31, 0xf6]),  # xor rsi, rsi (O_RDONLY)
            bytes([0x66, 0xbe, 0x01, 0x04]),  # mov si, 0x401 (O_RDWR|O_CREAT)
            bytes([0x66, 0xbe, 0x42, 0x04]),  # mov si, 0x442 (O_RDWR|O_CREAT|O_EXCL)
            bytes([0xbe, 0x02, 0x00, 0x00, 0x00]),  # mov esi, 2 (O_RDWR)
        ],
        "file_modes": [
            bytes([0x66, 0xba, 0xa4, 0x01]),  # mov dx, 0x1a4 (0644 octal)
            bytes([0x66, 0xba, 0xff, 0x01]),  # mov dx, 0x1ff (0777 octal)
            bytes([0x66, 0xba, 0xb6, 0x01]),  # mov dx, 0x1b6 (0666 octal)
            bytes([0x48, 0xc7, 0xc2, 0xa4, 0x01, 0x00, 0x00]),  # mov rdx, 0x1a4 (0644 octal)
        ],
        "user_entry": [
            # Common backdoor user entries added to passwd
            bytes([0x3a, 0x3a, 0x30, 0x3a, 0x30, 0x3a]),  # ::0:0: (root-level user)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68]),  # /bin/sh (shell path)
            bytes([0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68]),  # /bin/bash
        ],
        "specific": [
            # common passwd modification patterns for 64-bit
            bytes([0x48, 0x31, 0xc0, 0x48, 0x89, 0xe7, 0x48, 0xb8, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73,
                   0x50, 0x48, 0xb8, 0x73, 0x77, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x48, 0x89, 0xe7]),

            bytes([0x48, 0x31, 0xd2, 0x52, 0x48, 0xb8, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73,
                   0x50, 0x48, 0xb8, 0x73, 0x77, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x48, 0x89, 0xe7,
                   0x48, 0x31, 0xf6, 0xb0, 0x02, 0x0f, 0x05]),

            bytes([0x48, 0xbf, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x73, 0x48, 0xc1, 0xe7, 0x08,
                   0x48, 0xbf, 0x73, 0x77, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x09, 0xf8, 0x50,
                   0x48, 0x89, 0xe7, 0x48, 0x31, 0xf6, 0xb0, 0x02, 0x0f, 0x05])
        ]
    }
}

# Define pattern combinations that indicate passwd modification when found together
pattern_combinations = {
    "32bit": [
        ["syscall", "open_passwd", "passwd_string"],  # Opening /etc/passwd
        ["open_passwd", "passwd_string", "write_file"],  # Opening and writing to /etc/passwd
        ["passwd_string", "user_entry"],  # Having both passwd path and suspicious user entry
        ["open_passwd", "read_file", "write_file", "passwd_string"]  # Read-modify-write pattern on passwd
    ],
    "64bit": [
        ["syscall", "open_passwd", "passwd_string"],  # Opening /etc/passwd
        ["open_passwd", "passwd_string", "write_file"],  # Opening and writing to /etc/passwd
        ["passwd_string", "user_entry"],  # Having both passwd path and suspicious user entry
        ["open_passwd", "read_file", "write_file", "passwd_string"]  # Read-modify-write pattern on passwd
    ]
}

# Confidence values for each component category
component_confidence = {
    "syscall": 0.2,
    "open_passwd": 0.3,
    "read_file": 0.1,
    "write_file": 0.2,
    "close_file": 0.05,
    "chmod_file": 0.25,
    "execve": 0.3,
    "passwd_string": 0.4,
    "file_flags": 0.1,
    "file_modes": 0.1,
    "user_entry": 0.6,
    "specific": 0.9  # High confidence for specific known patterns
}